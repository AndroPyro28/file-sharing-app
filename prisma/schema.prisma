// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Files {
  id        String   @id @default(cuid())
  imageId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  link      Links    @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId    String

  filename  String
  filetype  String
  size      Int      // Size in bytes
}

model Links {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  url           String   @db.Text
  user          Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  expirationDate DateTime? // Optional expiration for temporary links
  isActive      Boolean   @default(true)
  Files         Files[]
}

model Users {
  id               String    @id @default(cuid())
  isArchived       Boolean   @default(false)
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  isVerified       Boolean?
  verificationCode String?
  image            String?
  hashedPassword   String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  profile          Profile?
  links            Links[]
  files            Files[]

  @@index([email])
}

model Profile {
  id         String   @id @unique @default(cuid())
  firstname  String?
  lastname   String?
  middlename String?
  suffix     String?
  contactNo  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique

   @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}